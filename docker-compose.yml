version: '3'
services:
  postgres:
    image: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/data/postgres
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./.env
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./postgres/servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
  backend:
    build: ./backend
    image: undrfined/backend
    depends_on:
      - redis
      - postgres
    env_file:
      - ./.env
    ports:
      - "8080:8080"
  nginx:
    build: .
    platform: linux/amd64
    env_file:
      - ./.env
    volumes:
      - .:/usr/src/app
      - nginx_conf:/etc/nginx/sites
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
    ports:
      - "${APP_PORT}:80"
      - "${APP_PORT_SSL}:443"
    restart: unless-stopped

  certbot:
    build: ./certbot
    image: undrfined/certbot
    env_file:
      - ./.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot

  cron:
    build: ./cron
    image: undrfined/cron
    environment:
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workdir:ro
    restart: unless-stopped

volumes:
  nginx_conf:
    external: true
  letsencrypt_certs:
    external: true
  certbot_acme_challenge:
  redis:
    driver: local
  postgres:
  pgadmin: